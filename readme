# MyShell

## By Fahad Hussain (100816265), Kevaun Harris (100822219), Ayush Patel (100823602), and Rajiv Lomada (100823689)

## Introduction
MyShell is a simple shell program for educational purposes, supporting basic command-line operations.

## Features
- Internal commands: 
	-`cd` for changing the current working directory.
	-`clr` for clearing the screen.
	-`dir` for listing the contents of a directory.
	-`environ` for printing all the environment variables.
	-`echo` for printing a comment on the display.
	-`help` to display the user manual.
	-`pause` to pause operation of the shell.
	-`quit` to quit the shell.
- External commands.
	- After reading a command and determining its not an internal command, our shell uses `fork` to create a child process.
	- Our shell (the parent process) waits for the child process to finish executing before taking more user input. 
- Standard keyboard input.
- Batchfile input.


## Installation and Compilation\Execution
- To compile MyShell, run the following command in the terminal:
	make
- Then, to run MyShell, enter the following command in the terminal:
	./myshell
- To run MyShell with a batch file, enter the following command in the terminal:
	./myshell <batchfile>
- Replace <batchfile> with the name of the batchfile. Ex. batch-file.bat


## Supplementary Knowledge/Information
- What is a Shell?
	A shell is a command-line interface that allows users to interact with the operating system by typing commands. It interprets user commands and executes them.

- Terminal
	The terminal is the interface through which you interact with the shell. It displays a prompt where you can type commands.

- Command Syntax
	Commands typically follow this syntax:
		command [options] [arguments]
	Command: The action you want the shell to perform.
	Options: Additional flags that modify the behavior of the command.
	Arguments: Input data for the command.

- I/O Redirection
	I/O redirection is a powerful feature that allows you to control input and output streams of commands.
	In UNIX, there are three standard streams:

		Standard Input (stdin): The default input stream. By default, it reads from the keyboard.
		Standard Output (stdout): The default output stream. By default, it writes to the terminal.
		Standard Error (stderr): The stream where error messages are written. Also writes to the terminal by default.

		Redirection Operators
			>: Redirects stdout to a file, overwriting its contents.
			>>: Redirects stdout to a file, appending to its contents.
			<: Redirects stdin from a file.
			2>: Redirects stderr to a file.
			&>: Redirects both stdout and stderr to a file.

- Program Environment
	The program environment refers to the set of variables and settings that affect how programs run.

- Environment Variables
	Environment variables are dynamic-named values that affect the behavior of processes and programs.

	Common Environment Variables
		PATH: Defines directories to search for executable files.
		HOME: Specifies the users home directory.
		USER: Stores the username of the current user.

- Background Execution
	Background execution allows you to run commands without blocking the shell prompt.


- Background Operator
	&: Placing an ampersand at the end of a command runs it in the background.

- Batchfile
	Files used to automate repetitive tasks, execute commands, or perform various operations without user intervention. Batch files can include 
	commands, control structures (like loops and conditionals), and variables to enhance their functionality.
